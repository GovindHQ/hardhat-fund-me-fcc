{
  "address": "0x335c45718922f27de8a9FCa40EC2894a7729268e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfc3e22d5ea58b714792d420e80f344d6a27ebcd2a0d9e6f9066d83d55d56c61e",
  "receipt": {
    "to": null,
    "from": "0xb9Eec5b8385C6b19A95DDA3E4CD8acf1E6Fd5d76",
    "contractAddress": "0x335c45718922f27de8a9FCa40EC2894a7729268e",
    "transactionIndex": 13,
    "gasUsed": "860862",
    "logsBloom": "0x
    "blockHash": "0x96e5b19b3c5e7a17382d3b291633f0f4b56e02283586b5f25e03bdc82f72305a",
    "transactionHash": "0xfc3e22d5ea58b714792d420e80f344d6a27ebcd2a0d9e6f9066d83d55d56c61e",
    "logs": [],
    "blockNumber": 3359349,
    "cumulativeGasUsed": "1686208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ac6aee621e14180ebc10e4e10f2403d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//get funds from users\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PriceConverter.sol\\\"; //importing the library of functions.\\n\\ncontract FundMe2 {\\n    using PriceConverter for uint256;\\n\\n    uint256 public minimumUsd = 50 * 1e18;\\n\\n    address[] public funders; // address array to store all the addresses of the funders.\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public owner; // to store the address of the one who first deploys this contract.\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        // a contructor is something that is called right when you deploy the contract.\\n        owner = msg.sender; // address stored.\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        // we can put this in function declaration where we need this condition to be satisfied.\\n        require(msg.sender == owner, \\\"Sender is not owner!\\\");\\n        _; //underscore signal only to do the rest of the code if this modifier code is satisfied\\n        //if underscore was above the require code, then the function code is done before the modifier code is run.\\n    }\\n\\n    function fund() public payable {\\n        //smart contract addresses can hold funds just like wallets.\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= minimumUsd, //takes two parameters, first parameter is msg.value and the second one is priceFeed\\n            \\\"did'nt send enough!\\\"\\n        ); //since we are using the library function.\\n        //msg.value is considered as the first parameter for any of these library functions.\\n        //We want to set a minimum fund amount in usd\\n        //require(getConversionRate(msg.value) >= minimumUsd, \\\"Did'nt send enough!\\\"); // 1e18 = 1 * 10 ** 18 = 1 eth, since 1e18 wei is 1 eth\\n        // revert undos any action before and sends the remaining gas back, so if not enough ether is send, this will revert.\\n        funders.push(msg.sender); // msg.sender gives address of whoever calls the fund function.\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // modifier used.\\n        //require(msg.sender == owner, \\\"sender is not owner!\\\"); //only the owner can withdraw funds - we will create a modifier for this\\n        //1.set the addresstoamountfunded to zero\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            //starting index, ending, change per loop\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n\\n            //2. reset the funders array\\n            funders = new address[](0); //we set a new address array with zero objects.\\n            //3.actually withdraw the funds\\n            //three different ways- transfer, send, call.\\n\\n            //transfer\\n\\n            // payable(msg.sender).transfer(address(this).balance);//msg.sender is type address so we type cast it to payable address type.\\n            // //msg.sender is the address to which we send the balance.\\n            // //if transfer fails, it would show error and revert the transaction\\n            // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n            // require(sendSuccess, \\\"send failed\\\");\\n            // //send does not show error instead returns true or false\\n            // //so we add requre statement to revert it if it fails\\n\\n            (bool callSuccess, ) = payable(msg.sender).call{\\n                value: address(this).balance\\n            }(\\\"\\\");\\n            //returns two varibles, quite advanced function, will learn more later.\\n            require(callSuccess, \\\"Call failed!\\\");\\n        }\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x5f5c7bab14fb5110ab72c8e60e85df3688e9dd3c11f9a996502948da039a1ff7\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n//this is actually going to be a library.\\n//cant have state variables and cant send any ether.\\n//all the functions in a library is going to be internal\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//use yarn add --dev @chainlink/contracts\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // since we have to interact with a contract outside of this project\\n        //we will need the ABI and the address of the chainlink contract to get the price.\\n        // address 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        //to get address go to ethereum data feeds.\\n        //to get the abi, we use interfaces, interfaces are programs which have all the functions of the contract we need\\n        //but has no code of the functions, since abi is just a list of functions in a contract, we can use that interface.\\n        //https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n        //check this interface out that we will be using.\\n        //we can either copy paste this interface here or import the npm link which we got from chainlink docs\\n\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); //since latestrounddata returns multiple values, look in code.\\n        return uint256(price); //multiply to match msg.value units in wei\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; //always multiply first.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9da211b3dcc906e0b8313f631bc42f39c78dfdb4a2efebb09f4686c9c0f3bb2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526802b5e3af16b188000060005534801561001d57600080fd5b50604051610ec3380380610ec3833981810160405281019061003f919061012a565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610157565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100f7826100cc565b9050919050565b610107816100ec565b811461011257600080fd5b50565b600081519050610124816100fe565b92915050565b6000602082840312156101405761013f6100c7565b5b600061014e84828501610115565b91505092915050565b610d5d806101666000396000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c5780638da5cb5b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b8063098de8201461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102cb565b6040516100af919061074c565b60405180910390f35b3480156100c457600080fd5b506100cd6102d1565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107ca565b61051d565b604051610103919061074c565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610856565b60405180910390f35b34801561014357600080fd5b5061014c61055b565b6040516101599190610880565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108c7565b610581565b6040516101a09190610880565b60405180910390f35b6000546101e1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021990610951565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610358906109bd565b60405180910390fd5b60005b60018054905081101561051a57600060018281548110610387576103866109dd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561041457610413610a0c565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b506001908051906020019061045892919061068c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047f90610a6c565b60006040518083038185875af1925050503d80600081146104bc576040519150601f19603f3d011682016040523d82523d6000602084013e6104c1565b606091505b5050905080610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610acd565b60405180910390fd5b5050808061051290610b1c565b915050610364565b50565b60026020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610b65565b6105ef9190610bee565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610cac565b50505091505080915050919050565b828054828255906000526020600020908101928215610705579160200282015b828111156107045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ac565b5b5090506107129190610716565b5090565b5b8082111561072f576000816000905550600101610717565b5090565b6000819050919050565b61074681610733565b82525050565b6000602082019050610761600083018461073d565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107978261076c565b9050919050565b6107a78161078c565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000602082840312156107e0576107df610767565b5b60006107ee848285016107b5565b91505092915050565b6000819050919050565b600061081c6108176108128461076c565b6107f7565b61076c565b9050919050565b600061082e82610801565b9050919050565b600061084082610823565b9050919050565b61085081610835565b82525050565b600060208201905061086b6000830184610847565b92915050565b61087a8161078c565b82525050565b60006020820190506108956000830184610871565b92915050565b6108a481610733565b81146108af57600080fd5b50565b6000813590506108c18161089b565b92915050565b6000602082840312156108dd576108dc610767565b5b60006108eb848285016108b2565b91505092915050565b600082825260208201905092915050565b7f646964276e742073656e6420656e6f7567682100000000000000000000000000600082015250565b600061093b6013836108f4565b915061094682610905565b602082019050919050565b6000602082019050818103600083015261096a8161092e565b9050919050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b60006109a76014836108f4565b91506109b282610971565b602082019050919050565b600060208201905081810360008301526109d68161099a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a56600083610a3b565b9150610a6182610a46565b600082019050919050565b6000610a7782610a49565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610ab7600c836108f4565b9150610ac282610a81565b602082019050919050565b60006020820190508181036000830152610ae681610aaa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2782610733565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b5a57610b59610aed565b5b600182019050919050565b6000610b7082610733565b9150610b7b83610733565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bb457610bb3610aed565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bf982610733565b9150610c0483610733565b925082610c1457610c13610bbf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c3e81610c1f565b8114610c4957600080fd5b50565b600081519050610c5b81610c35565b92915050565b6000819050919050565b610c7481610c61565b8114610c7f57600080fd5b50565b600081519050610c9181610c6b565b92915050565b600081519050610ca68161089b565b92915050565b600080600080600060a08688031215610cc857610cc7610767565b5b6000610cd688828901610c4c565b9550506020610ce788828901610c82565b9450506040610cf888828901610c97565b9350506060610d0988828901610c97565b9250506080610d1a88828901610c4c565b915050929550929590935056fea2646970667358221220eb926b81647adb97ffb44162c135ed5567b04c6dd090056453fed3b6187466fb64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c5780638da5cb5b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b8063098de8201461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102cb565b6040516100af919061074c565b60405180910390f35b3480156100c457600080fd5b506100cd6102d1565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107ca565b61051d565b604051610103919061074c565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610856565b60405180910390f35b34801561014357600080fd5b5061014c61055b565b6040516101599190610880565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108c7565b610581565b6040516101a09190610880565b60405180910390f35b6000546101e1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021990610951565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610358906109bd565b60405180910390fd5b60005b60018054905081101561051a57600060018281548110610387576103866109dd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561041457610413610a0c565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b506001908051906020019061045892919061068c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047f90610a6c565b60006040518083038185875af1925050503d80600081146104bc576040519150601f19603f3d011682016040523d82523d6000602084013e6104c1565b606091505b5050905080610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610acd565b60405180910390fd5b5050808061051290610b1c565b915050610364565b50565b60026020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061059157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cc836105fc565b90506000670de0b6b3a764000085836105e59190610b65565b6105ef9190610bee565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610cac565b50505091505080915050919050565b828054828255906000526020600020908101928215610705579160200282015b828111156107045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ac565b5b5090506107129190610716565b5090565b5b8082111561072f576000816000905550600101610717565b5090565b6000819050919050565b61074681610733565b82525050565b6000602082019050610761600083018461073d565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107978261076c565b9050919050565b6107a78161078c565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000602082840312156107e0576107df610767565b5b60006107ee848285016107b5565b91505092915050565b6000819050919050565b600061081c6108176108128461076c565b6107f7565b61076c565b9050919050565b600061082e82610801565b9050919050565b600061084082610823565b9050919050565b61085081610835565b82525050565b600060208201905061086b6000830184610847565b92915050565b61087a8161078c565b82525050565b60006020820190506108956000830184610871565b92915050565b6108a481610733565b81146108af57600080fd5b50565b6000813590506108c18161089b565b92915050565b6000602082840312156108dd576108dc610767565b5b60006108eb848285016108b2565b91505092915050565b600082825260208201905092915050565b7f646964276e742073656e6420656e6f7567682100000000000000000000000000600082015250565b600061093b6013836108f4565b915061094682610905565b602082019050919050565b6000602082019050818103600083015261096a8161092e565b9050919050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b60006109a76014836108f4565b91506109b282610971565b602082019050919050565b600060208201905081810360008301526109d68161099a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a56600083610a3b565b9150610a6182610a46565b600082019050919050565b6000610a7782610a49565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610ab7600c836108f4565b9150610ac282610a81565b602082019050919050565b60006020820190508181036000830152610ae681610aaa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2782610733565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b5a57610b59610aed565b5b600182019050919050565b6000610b7082610733565b9150610b7b83610733565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bb457610bb3610aed565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bf982610733565b9150610c0483610733565b925082610c1457610c13610bbf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c3e81610c1f565b8114610c4957600080fd5b50565b600081519050610c5b81610c35565b92915050565b6000819050919050565b610c7481610c61565b8114610c7f57600080fd5b50565b600081519050610c9181610c6b565b92915050565b600081519050610ca68161089b565b92915050565b600080600080600060a08688031215610cc857610cc7610767565b5b6000610cd688828901610c4c565b9550506020610ce788828901610c82565b9450506040610cf888828901610c97565b9350506060610d0988828901610c97565b9250506080610d1a88828901610c4c565b915050929550929590935056fea2646970667358221220eb926b81647adb97ffb44162c135ed5567b04c6dd090056453fed3b6187466fb64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/FundMe.sol:FundMe2",
        "label": "minimumUsd",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe2",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe2",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe2",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe2",
        "label": "priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}